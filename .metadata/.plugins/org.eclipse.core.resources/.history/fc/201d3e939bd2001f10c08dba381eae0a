package machine;

import java.util.ArrayList;
import java.util.List;

import discounts.Discount;
import discounts.FreeDiscount;
import discounts.PercentageDiscount;
import discounts.PriceDiscount;
import machine.hardware.BillAcceptor;
import machine.hardware.CardReader;
import machine.hardware.Display;
import machine.hardware.Keyboard;
import machine.hardware.Printer;
import machine.model.Event;
import machine.model.Ticket;
import payments.CardPayment;
import payments.CashPayment;
import payments.Payment;
import payments.PaypalPayment;
import ruralvia.BankGateway;

public class Machine {
	private enum PaymentMode {
		CREDIT_CARD, CASH
	}

	private List<Event> events = new ArrayList<>();

	// los distintos componentes físicos con los que interactúa la máquina
	// expendedora
	private Display display = new Display();
	private Keyboard keyboard = new Keyboard();
	private Printer printer = new Printer();
	private CardReader cardReader = new CardReader();
	private BillAcceptor billAcceptor = new BillAcceptor();

	// pasarela de pagos (para los pagos con tarjeta)
	private BankGateway bankGateway = new BankGateway();

	// -- Métodos públicos
	// -------------------------------------------------------------------------

	public void addEvent(Event event) {
		events.add(event);
	}

	public void run() {
		while (true) {
			Event selectedEvent = selectEvent();

			display.show("\n¿Cuántas entradas desea comprar? ");
			int numberOfTickets = howManyTickets(selectedEvent.getAvailableTickets());

			// se calcula el importe a pagar
			double amountToPay = numberOfTickets * selectedEvent.getPrice();
			display.show(String.format("Importe a pagar: %.2f €%n", amountToPay));

			// MODIFICACIÓN DESCUENTOS
			Discount discount = selectDiscount();

			// MODIFICACIÓN: CREACIÓN DE INTERFAZ PAYMENT Y CREACIÓN DE MÉTODOS DE PAGO
			Payment paymentMode = selectPaymentMode();

			// se realiza el pago
			boolean isValidPayment = paymentMode.pay(amountToPay);

			if (!isValidPayment) {
				display.show("No se ha podido completar el pago\n\n");
				continue;
			}

			// se generan las entradas
			List<Ticket> tickets = selectedEvent.generateTickets(numberOfTickets);

			// por último, la máquina imprime las entradas generadas
			display.show("\nSus entradas se están imprimiendo...\n");
			for (Ticket ticket : tickets) {
				printer.printTicket(ticket);
			}

			display.show("Gracias por su compra, que disfrute del evento.\n\n");
		}
	}

	private Discount selectDiscount() {
		display.show("\nIntroduzca código de descuento:\n");

		String option = keyboard.readString();
		if (option.equals("15EURACOS")) {
			return new PriceDiscount();
		} else if (option.equals("VERANO20")) {
			return new PercentageDiscount();
		} else if (option.equals("FREE1")) {
			return new FreeDiscount();
		}
		else {
			return null;
		}
	}

	// -- Pago
	// -------------------------------------------------------------------------

	private Payment selectPaymentMode() {
		display.show("\nEscoja un método de pago:\n");
		display.show("  1. Pago con tarjeta\n");
		display.show("  2. Pago en efectivo\n");
		display.show("  3. Pago con Paypal\n");
		int option = keyboard.readOption(3);
		switch (option) {
		case 1:
			return new CardPayment();
		case 2:
			return new CashPayment();
		case 3:
			return new PaypalPayment();
		default:
			throw new AssertionError("Método de pago inválido");
		}
	}

	// -- Seleccionar evento
	// -------------------------------------------------------------------------

	private Event selectEvent() {
		showEvents();
		int option = keyboard.readOption(events.size());
		Event event = events.get(option - 1);
		showEvent(event);
		return event;
	}

	private void showEvents() {
		display.show("Seleccione un evento:\n");
		int i = 1;
		for (Event each : events) {
			System.out.printf("%d. %s%n", i, each.getName());
			i++;
		}
	}

	private void showEvent(Event event) {
		display.show("Evento seleccionado:\n");
		display.show("  " + event.getName() + "\n");
		display.show(String.format("  Quedan %d entradas disponibles a %.2f euros%n", event.getAvailableTickets(),
				event.getPrice()));
	}

	// -- Pedir el número de entradas
	// -------------------------------------------------------------------------

	private int howManyTickets(int availableTickets) {
		do {
			int numberOfTickets = keyboard.readInt();
			if (numberOfTickets <= availableTickets)
				return numberOfTickets;
			display.show(String.format("Sólo quedan %d entradas disponibles, seleccione un número menor: ",
					availableTickets));
		} while (true);
	}
}
